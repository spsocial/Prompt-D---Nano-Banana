// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for tracking unique users
model User {
  id            String    @id @default(cuid())
  userId        String    @unique

  // NextAuth fields
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  firstSeen     DateTime  @default(now())
  lastActive    DateTime  @updatedAt
  totalGenerated Int      @default(0)
  totalSpent    Float    @default(0)
  credits       Int      @default(0)  // User's current credits
  creditsUsed   Int      @default(0)  // Total credits used (images)
  videosGenerated Int    @default(0)  // Total videos generated
  videoCreditsUsed Int   @default(0)  // Total credits used for videos

  // Relations
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  images        ImageGeneration[]
  videos        VideoGeneration[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([lastActive])
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Transaction model for payment tracking
model Transaction {
  id            String   @id @default(cuid())
  transactionId String   @unique
  userId        String
  amount        Float
  packageName   String
  status        String   @default("completed")

  // Relations
  user          User     @relation(fields: [userId], references: [userId])

  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Image generation tracking
model ImageGeneration {
  id            String   @id @default(cuid())
  userId        String
  style         String
  prompt        String?  @db.Text

  // Relations
  user          User     @relation(fields: [userId], references: [userId])

  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([style])
  @@index([createdAt])
}

// Video generation tracking
model VideoGeneration {
  id            String   @id @default(cuid())
  userId        String
  model         String   // sora-2, sora-2-hd, veo3-fast
  mode          String   // text-to-video, image-to-video
  prompt        String?  @db.Text
  duration      Int      // seconds
  aspectRatio   String   // 16:9, 9:16, 1:1
  creditsUsed   Int      // 10, 15, etc.
  success       Boolean  @default(true)

  // Relations
  user          User     @relation(fields: [userId], references: [userId])

  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([model])
  @@index([createdAt])
  @@index([success])
}

// Video generation errors/failures
model VideoError {
  id            String   @id @default(cuid())
  userId        String
  model         String   // sora-2, sora-2-hd, veo3-fast
  mode          String   // text-to-video, image-to-video
  errorType     String   // timeout, api_error, content_violation, etc.
  errorMessage  String?  @db.Text
  creditsRefunded Int    // Credits that were refunded

  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([model])
  @@index([errorType])
  @@index([createdAt])
}

// Daily statistics (aggregated data)
model DailyStats {
  id            String   @id @default(cuid())
  date          DateTime @unique @db.Date
  newUsers      Int      @default(0)
  activeUsers   Int      @default(0)
  totalImages   Int      @default(0)
  totalVideos   Int      @default(0)
  videosSora2   Int      @default(0)
  videosSora2HD Int      @default(0)
  videosVeo3    Int      @default(0)
  videoErrors   Int      @default(0)
  totalRevenue  Float    @default(0)
  totalTransactions Int  @default(0)

  createdAt     DateTime @default(now())

  @@index([date])
}

// Monthly statistics
model MonthlyStats {
  id            String   @id @default(cuid())
  month         String   @unique // Format: YYYY-MM
  totalUsers    Int      @default(0)
  activeUsers   Int      @default(0)
  totalImages   Int      @default(0)
  totalVideos   Int      @default(0)
  videosSora2   Int      @default(0)
  videosSora2HD Int      @default(0)
  videosVeo3    Int      @default(0)
  videoErrors   Int      @default(0)
  totalRevenue  Float    @default(0)
  totalTransactions Int  @default(0)

  createdAt     DateTime @default(now())

  @@index([month])
}